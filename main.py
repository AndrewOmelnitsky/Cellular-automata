# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GOL.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import math

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog

from app_ui import Ui_MainWindow
import game_widget
import cell_engine as ce



class MyUi_MainWindow(Ui_MainWindow):
    def setupUi(self, MainWindow, *args):
        super().setupUi(MainWindow, *args)
        self.__init_game_widget(
            self.label_iter, self.label_x, self.label_y,
            self.runBtn, self.stopBtn, self.nextBtn,
            self.speedSlider
        )

        self.select_groups = dict()
        self.select_groups[game_widget.GameController.GENERATIONS_LINEAR] = self.generationsLinearGroup
        self.select_groups[game_widget.GameController.GENERATIONS_STANDART] = self.generationsStandartGroup
        self.select_groups[game_widget.GameController.CRYSTAL] = self.crystalGroup

        select_group_position = (10, 10)
        self.move_select_groups_to(select_group_position)
        self.hide_all_select_groups()

        gcui = game_widget.GameControllerUi()

        gcui.add_generations_linear_inputs(
            self.sInputGL, self.bInputGL, self.cInputGL
        )
        gcui.add_generations_standart_inputs(
            self.sInputGS, self.bInputGS, self.cInputGS
        )
        gcui.add_crystal_inputs(self.InputCrystal)

        self.__init_game_controller(
            self.game, gcui,
            self.actionClear, self.action3_in_center,
            self.actionSquare_in_center, self.actionSet_point_in_center,
            self.actionBigSqueare, self.actionSet_random,
            self.actionGenerations_linear, self.actionGenerations_standart,
            self.actionCystal,
            self.updateRulesGLBtn, self.updateRulesGSBtn, self.updateRulesCBtn,
            self.clearMapGLCB, self.clearMapGSCB, self.clearMapCCB,
        )

        self.__init_save_action(self.actionSave, MainWindow)
        self.__init_open_action(self.actionOpen, MainWindow)
        self.__init_save_animation_action(self.actionSaveAnimation, MainWindow)


    def move_select_groups_to(self, pos):
        for i in self.select_groups:
            self.select_groups[i].move(*pos)


    def hide_all_select_groups(self):
        for i in self.select_groups:
            self.select_groups[i].hide()


    def show_by_key_select_groups(self, key):
        # print(key)
        self.select_groups[key].show()


    def change_cell_engine_by_key(self, key):
        self.game_controller.set_ce_by_key(key)
        self.hide_all_select_groups()
        self.show_by_key_select_groups(key)


    def save_game_ui(self, parent):
        filename, _ = QFileDialog.getSaveFileName(parent, "Save game file", 'game_file.bmp', "Game Files (*.bmp)")
        if filename:
            self.game_controller.save_game(filename)


    def open_game_ui(self, parent):
        filename, _ = QFileDialog.getOpenFileName(parent, "Open game file", 'game_file.bmp', "Game Files (*.bmp)")
        if filename:
            self.game_controller.open_game(filename)

    def save_animation_ui(self, parent):
        filename, _ = QFileDialog.getSaveFileName(parent, "Save game animation file", 'animation.gif', "Animation File (*.gif)")
        if filename:
            self.game_controller.save_animation(filename)


    def __init_save_action(self, act, parent):
        act.setShortcut('Ctrl+S')
        act.triggered.connect(lambda: self.save_game_ui(parent))


    def __init_open_action(self, act, parent):
        act.setShortcut('Ctrl+O')
        act.triggered.connect(lambda: self.open_game_ui(parent))


    def __init_save_animation_action(self, act, parent):
        act.setShortcut('Ctrl+Shift+A')
        act.triggered.connect(lambda: self.save_animation_ui(parent))


    def __init_game_widget(self, label_iter, label_x, label_y, runBtn, stopBtn, nextBtn, speedSlider):
        # ce_type = game_widget.GameController.GENERATIONS_LINEAR
        #
        # c_e = GameController.get_cell_engine_by_type(ce_type, (500, 500))
        def exp_cor(max_val, min_res, max_res, num):
            base = math.pow(max_res, 1/max_val)
            return max(min_res, int(math.pow(base, num)))

        slider_val = 50
        r_s, r_e, = 1, 100
        speed = exp_cor(r_e, 1, game_widget.GameAreaWidget.MAX_SPEED, slider_val)
        w, h = 240, 240
        x, y = 245, 15
        self.game = game_widget.GameAreaWidget(self.centralwidget, x, y, w, h, ce.CellEngine_Blur((500, 500)), speed)
        self.game.set_mouse_labels(label_x, label_y)
        self.game.set_label_iter(label_iter)

        runBtn.clicked.connect(self.game.start_timer)
        stopBtn.clicked.connect(self.game.stop_timer)
        nextBtn.clicked.connect(self.game.update_game)


        self.speedSlider.setRange(r_s, r_e)
        self.speedSlider.setValue(speed)
        e_c_l = lambda: exp_cor(r_e, 1, self.game.MAX_SPEED, speedSlider.value())
        speedSlider.valueChanged.connect(lambda: self.game.change_speed(e_c_l()))


    def __init_game_controller(self, game, gcui, clear, set_3, set_4, set_pc, set_bigs, set_random, gl_btn, gs_btn, c_btn, ur_gl, ur_gs, ur_c, um_gl_cb, um_gs_cb, um_c_cb):
        self.game_controller = game_widget.GameController((500, 500), game, gcui)
        self.game_controller.update_current_ce_in_game()

        clear.triggered.connect(self.game_controller.clear)
        set_3.triggered.connect(self.game_controller.set_3_in_center)
        set_4.triggered.connect(self.game_controller.set_square)
        set_bigs.triggered.connect(self.game_controller.set_big_square)
        set_pc.triggered.connect(self.game_controller.set_center_point)
        set_random.triggered.connect(self.game_controller.set_random)

        self.change_cell_engine_by_key(self.game_controller.get_current_ce_type())

        self.game_controller.ui_controller.set_event_on_inputs_generations_linear(self.game_controller, ur_gl, um_gl_cb)
        self.game_controller.ui_controller.set_event_on_inputs_generations_standart(self.game_controller, ur_gs, um_gs_cb)
        self.game_controller.ui_controller.set_event_on_inputs_crystal(self.game_controller, ur_c, um_c_cb)

        f_gl = lambda: self.change_cell_engine_by_key(game_widget.GameController.GENERATIONS_LINEAR)
        gl_btn.triggered.connect(f_gl)
        f_gs = lambda: self.change_cell_engine_by_key(game_widget.GameController.GENERATIONS_STANDART)
        gs_btn.triggered.connect(f_gs)
        f_c = lambda: self.change_cell_engine_by_key(game_widget.GameController.CRYSTAL)
        c_btn.triggered.connect(f_c)



if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)

    mainWindow = QMainWindow()

    ui = MyUi_MainWindow()
    ui.setupUi(mainWindow)

    mainWindow.show()

    app.exec()
